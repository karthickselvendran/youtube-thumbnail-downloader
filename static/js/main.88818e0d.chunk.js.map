{"version":3,"sources":["App.js","index.js"],"names":["App","useState","url","setUrl","resultUrl","setResultUrl","urlType","setUrlType","useEffect","includes","getUrl","alert","vimeoThumbnail","data","console","log","youtubeThumbnail","className","value","onChange","e","target","placeholder","onClick","height","src","alt","default","highMaxRes","sdddefautl","high","medium","href","rootElement","document","getElementById","createRoot","render"],"mappings":"qQAOe,SAASA,IAAO,IAAD,YAC5B,EAAsBC,mBAAS,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,WACJN,EAAIO,SAAS,OACfF,EAAW,WACFL,EAAIO,SAAS,OACtBF,EAAW,SAEXA,EAAW,GAEd,GAAE,CAACL,IAEJ,IAAMQ,EAAM,iDAAG,mGACRR,EADQ,yCACIS,MAAM,2BADV,UAEG,UAAZL,EAFS,iCAGMM,IAAeV,GAHrB,OAGPW,EAHO,OAIXC,QAAQC,IAAI,UAAYF,GACxBR,EAAaQ,GALF,yCAOWG,IAAiBd,GAP5B,QAOPE,EAPO,OAQXU,QAAQC,IAAI,QAAUX,GACtBC,EAAaD,GATF,4CAAH,qDAmBZ,OAPAU,QAAQC,IAAI,WAAaT,GACzBQ,QAAQC,IAAI,aAAeb,GAC3BY,QAAQC,IAAI,aAAeX,GAC3BU,QAAQC,IAAIX,GAKV,sBAAKa,UAAU,MAAf,UACE,oEACA,kFACA,uBACA,uBACA,uBACEC,MAAOhB,EACPiB,SAAU,SAACC,GAAD,OAAOjB,EAAOiB,EAAEC,OAAOH,MAAvB,EACVI,YAAY,yCAEd,uBACA,uBACA,wBAAQC,QAASb,EAAjB,2BACA,uBACA,uBACA,uBACCN,GAAyB,UAAZE,GACZ,8BACE,qBAAKkB,OAAO,MAAMC,IAAKrB,GAvDlB,2EAuDyCsB,IAAI,gBAIrDtB,GAAyB,YAAZE,IAAb,OAAsCF,QAAtC,IAAsCA,GAAtC,UAAsCA,EAAWuB,eAAjD,aAAsC,EAAoBzB,MACzD,gCACE,qDACA,qBAAKuB,IAAG,OAAErB,QAAF,IAAEA,GAAF,UAAEA,EAAWwB,kBAAb,aAAE,EAAuB1B,IAAKwB,IAAI,cAC1C,uBACA,oDACA,qBAAKD,IAAG,OAAErB,QAAF,IAAEA,GAAF,UAAEA,EAAWyB,kBAAb,aAAE,EAAuB3B,IAAKwB,IAAI,cAC1C,uBACA,uBACA,wDACA,qBAAKD,IAAG,OAAErB,QAAF,IAAEA,GAAF,UAAEA,EAAW0B,YAAb,aAAE,EAAiB5B,IAAKwB,IAAI,cACpC,uBACA,uBACA,wDACA,qBAAKD,IAAG,OAAErB,QAAF,IAAEA,GAAF,UAAEA,EAAW2B,cAAb,aAAE,EAAmB7B,IAAKwB,IAAI,cACtC,uBACA,uBACA,uDACA,qBAAKD,IAAG,OAAErB,QAAF,IAAEA,GAAF,UAAEA,EAAWuB,eAAb,aAAE,EAAoBzB,IAAKwB,IAAI,iBAG3C,uBACA,uBACA,gDACe,IACb,mBAAGM,KAAK,8CAAR,iCAEK,IAJP,SAKS,OAET,uBACA,yBAGL,CC7FD,IAAMC,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GAEnBI,OACH,cAAC,aAAD,UACE,cAACrC,EAAD,M","file":"static/js/main.88818e0d.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport youtubeThumbnail from \"youtube-thumbnail-downloader-hd\";\nimport vimeoThumbnail from \"thumbnail-youtube-vimeo\";\nimport \"./styles.css\";\n\nlet noImgUrl = \"https://www.planetread.org/images/bookboximages/copy%20of%20no-image.png\";\n\nexport default function App() {\n  const [url, setUrl] = useState(\"\");\n  const [resultUrl, setResultUrl] = useState(\"\");\n  const [urlType, setUrlType] = useState(\"\");\n\n  useEffect(() => {\n    if (url.includes(\"you\")) {\n      setUrlType(\"youtube\");\n    } else if (url.includes(\"vim\")) {\n      setUrlType(\"vimeo\");\n    } else {\n      setUrlType(\"\");\n    }\n  }, [url]);\n\n  const getUrl = async () => {\n    if (!url) return alert(\"Please enter video url\");\n    if (urlType === \"vimeo\") {\n      let data = await vimeoThumbnail(url);\n      console.log(\"test.. \" + data);\n      setResultUrl(data);\n    } else {\n      let resultUrl = await youtubeThumbnail(url);\n      console.log(\"data \" + resultUrl);\n      setResultUrl(resultUrl);\n    }\n  };\n  console.log(\"urlType \" + urlType);\n  console.log(\"input url \" + url);\n  console.log(\"resultUrl \" + resultUrl);\n  console.log(resultUrl);\n  // console.log(thumbnail);\n  // console.log(thumbnail.medium);\n  // console.log(thumbnail.medium.url);\n  return (\n    <div className=\"App\">\n      <h1>Youtube/Vimeo Thumbnail Downloader</h1>\n      <h3>Type your link and download your video thumbnail</h3>\n      <br />\n      <br />\n      <input\n        value={url}\n        onChange={(e) => setUrl(e.target.value)}\n        placeholder=\"Type youtube/vimeo video url here...\"\n      />\n      <br />\n      <br />\n      <button onClick={getUrl}>Get Thumbnail</button>\n      <br />\n      <br />\n      <br />\n      {resultUrl && urlType === \"vimeo\" && (\n        <div>\n          <img height=\"200\" src={resultUrl || noImgUrl} alt=\"thumbnail\" />\n        </div>\n      )}\n\n      {resultUrl && urlType === \"youtube\" && resultUrl?.default?.url && (\n        <div>\n          <h1>HD Image (1280x720)</h1>\n          <img src={resultUrl?.highMaxRes?.url} alt=\"thumbnail\" />\n          <br />\n          <h1>SD Image (640x480)</h1>\n          <img src={resultUrl?.sdddefautl?.url} alt=\"thumbnail\" />\n          <br />\n          <br />\n          <h1>Normal Image (480x360)</h1>\n          <img src={resultUrl?.high?.url} alt=\"thumbnail\" />\n          <br />\n          <br />\n          <h1>Normal Image (320x180)</h1>\n          <img src={resultUrl?.medium?.url} alt=\"thumbnail\" />\n          <br />\n          <br />\n          <h1>Normal Image (120x90)</h1>\n          <img src={resultUrl?.default?.url} alt=\"thumbnail\" />\n        </div>\n      )}\n      <br />\n      <br />\n      <span>\n        Developed by{\" \"}\n        <a href=\"https://linkedin.com/in/karthick-selvendran\">\n          Karthick Selvendran\n        </a>{\" \"}\n        @ 2022{\" \"}\n      </span>\n      <br />\n      <br />\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}